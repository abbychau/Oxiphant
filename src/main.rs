use std::env;
use std::fs::File;
use std::io::Write;
use std::process::{self, Command};
use oxiphant::asmgen::AsmGenerator;

fn main() {
    // Parse command-line arguments
    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        eprintln!("Usage: {} <input.php> [output.exe]", args[0]);
        process::exit(1);
    }

    let input_file = &args[1];
    let output_file = args.get(2).map(|s| s.as_str()).unwrap_or("output.exe");

    // Create temporary assembly file path
    let asm_file = format!("{}.s", input_file);

    // Compile the PHP file to bytecode
    let compilation_result = oxiphant::compile_file(input_file);

    if compilation_result.is_err() {
        let err = compilation_result.err().unwrap();
        eprintln!("Compilation error: {}", err);
        process::exit(1);
    }

    // If we get here, compilation was successful
    let instructions = compilation_result.unwrap();
    println!("Generated bytecode instructions: {:?}", instructions);

    // Generate assembly code directly
    let mut asmgen = AsmGenerator::new();
    let asm_code = asmgen.generate(&instructions);

    // Write the assembly code to a file
    let mut file = File::create(&asm_file).unwrap_or_else(|err| {
        eprintln!("Error creating assembly file: {}", err);
        process::exit(1);
    });

    file.write_all(asm_code.as_bytes()).unwrap_or_else(|err| {
        eprintln!("Error writing to assembly file: {}", err);
        process::exit(1);
    });

    println!("Generated assembly code in {}", asm_file);

    // Compile the assembly file with GCC
    println!("Compiling with GCC...");
    let status = Command::new("gcc")
        .args(["-o", output_file, &asm_file])
        .status()
        .unwrap_or_else(|err| {
            eprintln!("Failed to execute GCC: {}", err);
            process::exit(1);
        });

    if !status.success() {
        eprintln!("GCC compilation failed with exit code: {}", status);
        process::exit(1);
    }

    // Keep the assembly file for debugging
    println!("Assembly file kept at: {}", asm_file);

    println!("Successfully compiled {} to {}", input_file, output_file);
}
